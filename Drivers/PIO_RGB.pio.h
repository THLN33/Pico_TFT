// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// pio_indexer //
// ----------- //

#define pio_indexer_wrap_target 0
#define pio_indexer_wrap 3
#define pio_indexer_pio_version 0

#define pio_indexer_offset_init 0u

static const uint16_t pio_indexer_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0x4061, //  1: in     null, 1                    
    0x40e8, //  2: in     osr, 8                     
    0x4037, //  3: in     x, 23                      
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_indexer_program = {
    .instructions = pio_indexer_program_instructions,
    .length = 4,
    .origin = -1,
    .pio_version = 0,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config pio_indexer_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_indexer_wrap_target, offset + pio_indexer_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}


#endif

// -------------------------- //
// pio_send_serial_custom_RGB //
// -------------------------- //

#define pio_send_serial_custom_RGB_wrap_target 11
#define pio_send_serial_custom_RGB_wrap 31
#define pio_send_serial_custom_RGB_pio_version 0

#define pio_send_serial_custom_RGB_offset_start_Data 0u
#define pio_send_serial_custom_RGB_offset_start_Command 2u
#define pio_send_serial_custom_RGB_offset_start_32 6u
#define pio_send_serial_custom_RGB_offset_start_RGB 11u
#define pio_send_serial_custom_RGB_offset_Instr_Out 13u
#define pio_send_serial_custom_RGB_offset_Inst_RED_padding_cycles 14u
#define pio_send_serial_custom_RGB_offset_Inst_RED_cycles 15u
#define pio_send_serial_custom_RGB_offset_Inst_GREEN_padding_cycles 20u
#define pio_send_serial_custom_RGB_offset_Inst_GREEN_cycles 21u
#define pio_send_serial_custom_RGB_offset_Inst_BLUE_padding_cycles 26u
#define pio_send_serial_custom_RGB_offset_Inst_BLUE_cycles 27u

static const uint16_t pio_send_serial_custom_RGB_program_instructions[] = {
    0xe001, //  0: set    pins, 1         side 0     
    0x0003, //  1: jmp    3               side 0     
    0xe000, //  2: set    pins, 0         side 0     
    0x80a0, //  3: pull   block           side 0     
    0x6119, //  4: out    pins, 25        side 0 [1] 
    0x1108, //  5: jmp    8               side 1 [1] 
    0x80a0, //  6: pull   block           side 0     
    0xe001, //  7: set    pins, 1         side 0     
    0x6101, //  8: out    pins, 1         side 0 [1] 
    0x11e8, //  9: jmp    !osre, 8        side 1 [1] 
    0x0006, // 10: jmp    6               side 0     
            //     .wrap_target
    0x80a0, // 11: pull   block           side 0     
    0xe001, // 12: set    pins, 1         side 0     
    0x6119, // 13: out    pins, 25        side 0 [1] 
    0xe143, // 14: set    y, 3            side 0 [1] 
    0xf121, // 15: set    x, 1            side 1 [1] 
    0x6101, // 16: out    pins, 1         side 0 [1] 
    0x1150, // 17: jmp    x--, 16         side 1 [1] 
    0xa142, // 18: nop                    side 0 [1] 
    0x1192, // 19: jmp    y--, 18         side 1 [1] 
    0xe143, // 20: set    y, 3            side 0 [1] 
    0xf122, // 21: set    x, 2            side 1 [1] 
    0x6101, // 22: out    pins, 1         side 0 [1] 
    0x1156, // 23: jmp    x--, 22         side 1 [1] 
    0xa142, // 24: nop                    side 0 [1] 
    0x1198, // 25: jmp    y--, 24         side 1 [1] 
    0xe145, // 26: set    y, 5            side 0 [1] 
    0xf121, // 27: set    x, 1            side 1 [1] 
    0x6101, // 28: out    pins, 1         side 0 [1] 
    0x115c, // 29: jmp    x--, 28         side 1 [1] 
    0xa142, // 30: nop                    side 0 [1] 
    0x119e, // 31: jmp    y--, 30         side 1 [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_send_serial_custom_RGB_program = {
    .instructions = pio_send_serial_custom_RGB_program_instructions,
    .length = 32,
    .origin = -1,
    .pio_version = 0,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config pio_send_serial_custom_RGB_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_send_serial_custom_RGB_wrap_target, offset + pio_send_serial_custom_RGB_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

static inline void pio_set_instr_RED_cycles(PIO pio, uint8_t _program_offset, uint8_t cycles, uint8_t padding_cycles) {
	uint16_t instr;
    instr = pio_send_serial_custom_RGB_program_instructions[pio_send_serial_custom_RGB_offset_Inst_RED_cycles] & 0xFFE0;
	instr |= cycles & 0x1F;
	pio->instr_mem[_program_offset + pio_send_serial_custom_RGB_offset_Inst_RED_cycles] = instr;
    instr = pio_send_serial_custom_RGB_program_instructions[pio_send_serial_custom_RGB_offset_Inst_RED_padding_cycles] & 0xFFE0;
	instr |= padding_cycles & 0x1F;
	pio->instr_mem[_program_offset + pio_send_serial_custom_RGB_offset_Inst_RED_padding_cycles] = instr;		
}
static inline void pio_set_instr_GREEN_cycles(PIO pio, uint8_t _program_offset, uint8_t cycles, uint8_t padding_cycles) {
	uint16_t instr;
    instr = pio_send_serial_custom_RGB_program_instructions[pio_send_serial_custom_RGB_offset_Inst_GREEN_cycles] & 0xFFE0;
	instr |= cycles & 0x1F;
	pio->instr_mem[_program_offset + pio_send_serial_custom_RGB_offset_Inst_GREEN_cycles] = instr;
    instr = pio_send_serial_custom_RGB_program_instructions[pio_send_serial_custom_RGB_offset_Inst_GREEN_padding_cycles] & 0xFFE0;
	instr |= padding_cycles & 0x1F;
	pio->instr_mem[_program_offset + pio_send_serial_custom_RGB_offset_Inst_GREEN_padding_cycles] = instr;		
}
static inline void pio_set_instr_BLUE_cycles(PIO pio, uint8_t _program_offset, uint8_t cycles, uint8_t padding_cycles) {
	uint16_t instr;
    instr = pio_send_serial_custom_RGB_program_instructions[pio_send_serial_custom_RGB_offset_Inst_BLUE_cycles] & 0xFFE0;
	instr |= cycles & 0x1F;
	pio->instr_mem[_program_offset + pio_send_serial_custom_RGB_offset_Inst_BLUE_cycles] = instr;
    instr = pio_send_serial_custom_RGB_program_instructions[pio_send_serial_custom_RGB_offset_Inst_BLUE_padding_cycles] & 0xFFE0;
	instr |= padding_cycles & 0x1F;
	pio->instr_mem[_program_offset + pio_send_serial_custom_RGB_offset_Inst_BLUE_padding_cycles] = instr;		
}
static inline void pio_set_instr_out_custom_RGB(PIO pio, uint8_t _program_offset, uint8_t nb_bits) {
	uint16_t instr;
    instr = pio_send_serial_custom_RGB_program_instructions[pio_send_serial_custom_RGB_offset_Instr_Out] & 0xFFE0;
	switch(nb_bits) {
		case 8:
			pio->instr_mem[_program_offset + pio_send_serial_custom_RGB_offset_Instr_Out] = instr | 25;
		break;
		case 16:
			pio->instr_mem[_program_offset + pio_send_serial_custom_RGB_offset_Instr_Out] = instr | 17;		
		break;
	}		
}

#endif

// -------------------------- //
// pio_send_serial_direct_RGB //
// -------------------------- //

#define pio_send_serial_direct_RGB_wrap_target 11
#define pio_send_serial_direct_RGB_wrap 16
#define pio_send_serial_direct_RGB_pio_version 0

#define pio_send_serial_direct_RGB_offset_start_Data 0u
#define pio_send_serial_direct_RGB_offset_start_Command 2u
#define pio_send_serial_direct_RGB_offset_start_32 6u
#define pio_send_serial_direct_RGB_offset_start_RGB 11u
#define pio_send_serial_direct_RGB_offset_Instr_Out 13u

static const uint16_t pio_send_serial_direct_RGB_program_instructions[] = {
    0xe001, //  0: set    pins, 1         side 0     
    0x0003, //  1: jmp    3               side 0     
    0xe000, //  2: set    pins, 0         side 0     
    0x80a0, //  3: pull   block           side 0     
    0x6119, //  4: out    pins, 25        side 0 [1] 
    0x1108, //  5: jmp    8               side 1 [1] 
    0x80a0, //  6: pull   block           side 0     
    0xe001, //  7: set    pins, 1         side 0     
    0x6101, //  8: out    pins, 1         side 0 [1] 
    0x11e8, //  9: jmp    !osre, 8        side 1 [1] 
    0x0006, // 10: jmp    6               side 0     
            //     .wrap_target
    0x80a0, // 11: pull   block           side 0     
    0xe001, // 12: set    pins, 1         side 0     
    0x6109, // 13: out    pins, 9         side 0 [1] 
    0xb142, // 14: nop                    side 1 [1] 
    0x6101, // 15: out    pins, 1         side 0 [1] 
    0x11ef, // 16: jmp    !osre, 15       side 1 [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_send_serial_direct_RGB_program = {
    .instructions = pio_send_serial_direct_RGB_program_instructions,
    .length = 17,
    .origin = -1,
    .pio_version = 0,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config pio_send_serial_direct_RGB_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_send_serial_direct_RGB_wrap_target, offset + pio_send_serial_direct_RGB_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

static inline void pio_set_instr_out_direct_RGB(PIO pio, uint8_t _program_offset, uint8_t nb_bits) {
	uint16_t instr;
    instr = pio_send_serial_direct_RGB_program_instructions[pio_send_serial_direct_RGB_offset_Instr_Out] & 0xFFE0;
	switch(nb_bits) {
        /*
		case 8:
			pio->instr_mem[_program_offset + pio_send_serial_direct_RGBoffset_Instr_Out] = instr | 25;
		break;
        */
		case 16:
			pio->instr_mem[_program_offset + pio_send_serial_direct_RGB_offset_Instr_Out] = instr | 17;		
		break;
		case 18:
		case 24:        
			pio->instr_mem[_program_offset + pio_send_serial_direct_RGB_offset_Instr_Out] = instr | 9;		
		break;        
	}		
}

#endif

// --------------------------- //
// pio_send_parallel_8bits_RGB //
// --------------------------- //

#define pio_send_parallel_8bits_RGB_wrap_target 10
#define pio_send_parallel_8bits_RGB_wrap 15
#define pio_send_parallel_8bits_RGB_pio_version 0

#define pio_send_parallel_8bits_RGB_offset_start_Data 0u
#define pio_send_parallel_8bits_RGB_offset_start_Command 2u
#define pio_send_parallel_8bits_RGB_offset_start_32 5u
#define pio_send_parallel_8bits_RGB_offset_start_RGB 10u
#define pio_send_parallel_8bits_RGB_offset_RGB_byte 12u

static const uint16_t pio_send_parallel_8bits_RGB_program_instructions[] = {
    0xf001, //  0: set    pins, 1         side 0     
    0x1003, //  1: jmp    3               side 0     
    0xf000, //  2: set    pins, 0         side 0     
    0x90a0, //  3: pull   block           side 0     
    0x7200, //  4: out    pins, 32        side 0 [2] 
    0x9aa0, //  5: pull   block           side 1 [2] 
    0xf801, //  6: set    pins, 1         side 1     
    0x7208, //  7: out    pins, 8         side 0 [2] 
    0x1ae7, //  8: jmp    !osre, 7        side 1 [2] 
    0x1802, //  9: jmp    2               side 1     
            //     .wrap_target
    0xf001, // 10: set    pins, 1         side 0     
    0x90a0, // 11: pull   block           side 0     
    0x7218, // 12: out    pins, 24        side 0 [2] 
    0xba42, // 13: nop                    side 1 [2] 
    0x7208, // 14: out    pins, 8         side 0 [2] 
    0x1aee, // 15: jmp    !osre, 14       side 1 [2] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_send_parallel_8bits_RGB_program = {
    .instructions = pio_send_parallel_8bits_RGB_program_instructions,
    .length = 16,
    .origin = -1,
    .pio_version = 0,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config pio_send_parallel_8bits_RGB_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_send_parallel_8bits_RGB_wrap_target, offset + pio_send_parallel_8bits_RGB_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

static inline void pio_set_instr_parallel_RGB(PIO pio, uint8_t _program_offset, uint8_t nb_bits) {
	uint16_t instr;
    instr = pio_send_parallel_8bits_RGB_program_instructions[pio_send_parallel_8bits_RGB_offset_RGB_byte] & 0xFFE0;
	switch(nb_bits) {
        /*
		case 8:
			pio->instr_mem[_program_offset + pio_send_parallel_8bits_RGB_offset_RGB_byte] = instr | (32-0);
		break;
        */
		case 16:
			pio->instr_mem[_program_offset + pio_send_parallel_8bits_RGB_offset_RGB_byte] = instr | (32-8);		
		break;
		case 18:
		case 24:        
			pio->instr_mem[_program_offset + pio_send_parallel_8bits_RGB_offset_RGB_byte] = instr | (32-16);		
		break;        
	}
}

#endif


